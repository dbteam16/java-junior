package com.acme.edu.iteration02;import com.acme.edu.Logger;import com.acme.edu.SysoutCaptureAndAssertionAbility;import org.junit.After;import org.junit.Before;import org.junit.Test;import java.io.IOException;import static java.lang.System.lineSeparator;public class LoggerTest implements SysoutCaptureAndAssertionAbility {    private static String ls = lineSeparator();    //region given    @Before    public void setUpSystemOut() throws IOException {        resetOut();        captureSysout();    }    @After    public void tearDown() {        resetOut();    }    //endregion    @Test    public void shouldLogSequentIntegersAsSum() throws IOException {        //region when        Logger.log("str 1");        Logger.log(1);        Logger.log(2);        Logger.log("str 2");        Logger.log(0);        Logger.flush();        //endregion        String ls = lineSeparator();        //region then        assertSysoutEquals(                "string: str 1" + ls +                    "primitive: 3" + ls +                        "string: str 2" + ls +                    "primitive: 0" + ls        );        //endregion    }    @Test    public void shouldLogCorrectlyIntegerOverflowWhenSequentIntegers() {        //region when        Logger.log("str 1");        Logger.log(10);        Logger.log(Integer.MAX_VALUE);        Logger.log("str 2");        Logger.log(0);        Logger.flush();        //endregion        //region then        assertSysoutEquals(                "string: str 1" + ls +                    "primitive: 10" + ls +                    "primitive: " + Integer.MAX_VALUE + ls +                        "string: str 2" + ls +                    "primitive: 0" + ls        );        //endregion    }    @Test    public void shouldLogCorrectlyByteOverflowWhenSequentBytes() {        //region when        Logger.log("str 1");        Logger.log((byte)10);        Logger.log((byte)Byte.MAX_VALUE);        Logger.log("str 2");        Logger.log(0);        Logger.flush();        //endregion        //region then        assertSysoutEquals(                "string: str 1" + ls +                    "primitive: 10" + ls +                    "primitive: " + Byte.MAX_VALUE + ls +                        "string: str 2" + ls +                    "primitive: 0" + ls        );        //endregion    }    @Test    public void shouldLogSameSubsequentStringsWithoutRepeat() throws IOException {        //region when        Logger.log("str 1");        Logger.log("str 2");        Logger.log("str 2");        Logger.log(0);        Logger.log("str 2");        Logger.log("str 3");        Logger.log("str 3");        Logger.log("str 3");        Logger.flush();        //endregion        //region then        assertSysoutEquals(                "string: str 1" + ls +                        "string: str 2 (x2)" + ls +                    "primitive: 0" + ls +                        "string: str 2" + ls +                        "string: str 3 (x3)" + ls        );        //endregion    }}